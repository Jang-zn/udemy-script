Video: 4단계 - Java 게이밍 애플리케이션 시작하기\n==================================================\n\nSpring으로 처음 애플리케이션을 만들 기대가 되시나요?\n지금은 반복 1로 시작하겠습니다\n여러 게임을 실행하는 데 사용할 수 있는 GameRunner 클래스를 구축하겠습니다\n마리오, 슈퍼 콘트라, 팩맨처럼요\n이 단계에서는 GameRunner 클래스와 마리오 클래스를 만드는 데\n집중하겠습니다\nEclipse로 돌아가죠\n여기서 패키지를 선택하겠습니다\ncom.in28minutes와\nlearn-spring-framework가 있죠\n오른쪽 클릭하고 새 클래스를 선택하겠습니다\n새 클래스를 만들고 있으니까요\n이름은 AppGaming으로 시작하고\n기본 Java를 사용하니\nAppGamingBasicJava로 설정하겠습니다\n기본 메서드를 만들려 하고 있기 때문에 public static void main을\n선택하겠습니다\n마침을 클릭하겠습니다\n이제 기반 클래스가 생겼습니다\n이제 이 클래스로 무엇을 해야 할까요?\nGameRunner 클래스 인스턴스를 만들고 마리오를 시작하려 합니다\n이제 여기\nGameRunner = new GameRunner 클래스를 입력하고\nGameRunner 클래스 내부에서는 마리오 게임을 실행할 수 있도록 하려 하므로\n마리오 게임의 var도 만들겠습니다\nmarioGame = new MarioGame\nGameRunner 클래스에서는\n게임을 생성자 인수로 전달하고 마지막에는 실행해야 하니\nGameRunner\n.run을 입력합니다\n이렇게 생각하실 수 있습니다, 'Ranga, MarioGame 클래스와 GameRunner 클래스를\n작성하지 않았잖아요'\n수많은 컴파일 오류가 발생할 겁니다\nMarioGame은 타입으로 해결할 수 없고 GameRunner도 타입으로 해결할 수\n없습니다\n이 문제를 해결해 보죠\n여기로 와 Control 1 또는 Command 1을 누르면 클래스 MarioGame을 만들라는 제안이\n표시됩니다\n사용해 보죠\nMarioGame 클래스를 생성합니다\n소스 폴더는 src/main/java이며\n패키지는 com.in28minutes\nlearnspringframework\n.game이 됩니다\n이 패키지가 마리오 게임 클래스를 만들 위치가 됩니다\n나머지는 기본값으로 두고 마침을 누릅니다\n이제 마리오 게임 클래스가 준비되었습니다\n다음으로 GameRunner 클래스를 준비하겠습니다\n여기가 다음으로 컴파일 오류가 있는 위치입니다\n다시 Control 1 또는 Command 1을 누르고 클래스 GameRunner를\n만들겠습니다\n기본값으로 두고\n소스 폴더는 src/main/java를 그대로 사용하고 패키지는 com.in28minutes\nlearnspringframework\n앞서 만든 game 패키지를 사용하고\n나머지는 기본값으로 두고 마침을 누릅니다\n아주 좋아요\nlearnspringframework.game 패키지에 GameRunner 클래스가 생겼습니다\n코드를 작성하던 AppGamingBasicJava로 돌아와 보면\n다른 컴파일 오류가 생깁니다\n그 이유는 무엇일까요?\nMarioGame을 인수로 사용하는 생성자가 없기 때문입니다\nGameRunner 클래스로 돌아와 보면 여긴 생성자가 없습니다\n여기 MarioGame의 인스턴스를 만들어 주겠습니다\nGameRunner에서는 MarioGame을 실행할 수 없습니다\nMarioGame game을 입력해 주죠\n생성자를 만들어야 하니 public\nGameRunner\n그리고 MarioGame\ngame\n생성자는 어떻게 할까요?\nthis.game = game, 상당히 기본적인 Java 코드입니다\n여기 작성하는 것은 단순한 생성자고\n복잡할 게 없습니다\nAppGamingBasicJava로 돌아와 보면 이제 이 줄에 컴파일 오류가\n없습니다\nGameRunner.run에 컴파일 오류가 있으니 해결해 보죠\nControl 1을 누르고 GameRunner 타입에 run() 메서드를 만들겠습니다\n이러면 GameRunner 클래스에 public void run 메서드가 생깁니다\n이제 여기서 System.out.\nprintln\n그리고 게임 실행, 다음\n더하기\ngame을 넣겠습니다\n이러면 게임 game을 실행합니다\n한 가지 지름길을 사용했습니다\nSystem.out.println을 사용했죠\n일반적으로는 좋은 사례가 아닙니다\n보통 로깅 프레임워크를 사용하는 것이 좋죠\n로깅은 강의에서 나중에 다뤄 보겠습니다\n그 때까지는 콘솔에 아웃풋을 작성하는 데 System.out.println을 사용하겠습니다\n이제 AppGamingBasicJava\n클래스로 돌아가죠\n모든 것이 컴파일됩니다\n축하합니다\n준비가 끝났으니 오른쪽 클릭하고 다음으로 실행, Java 애플리케이션을 클릭합니다\n이 콘솔이 나타나지 않으면 여기를 더블 클릭하고\n여기서 콘솔을 확인할 수 있습니다, 콘솔에서는\n아웃풋을 확인할 수 있습니다 com.in28minutes\nlearnspringframework.game.MarioGame\n이러면 처음으로 실행되는 GameRunner 클래스 버전을 만들 수 있습니다\n일반적으로 게임을 실행할 때는 위, 아래, 왼쪽, 오른쪽, 여러 버튼을 누릅니다\n게임을 플레이할 때는 이렇게 하죠\n이러한 기능을 추가해 보겠습니다\nMarioGame으로 와 이 작업의 코드를 작성해 보죠\n일반적인 작업으로 public void up()\n무엇을 해야 할까요?\n버튼을 눌렀을 때 예를 들어 마리오 게임에서는 점프를 하고 이와 유사하게\n다른 메서드도 만들 수 있습니다\n아래 메서드로 마리오 게임에서 아래 버튼을 누르면 마리오는 구멍으로 들어가야 하며\n왼쪽 버튼의 경우\n왼쪽으로 가야 합니다\n돌아가기라고 해 주죠\n오른쪽 버튼의 경우 가속하도록 하겠습니다\n게임에서 특정 버튼을 눌렀을 때 특정 작업을 수행하는 메서드를\n구현하고 있는 것입니다\nGameRunner 메서드에서는 이를 호출할 수 있습니다\nRunning game에\n작업을 호출하겠습니다\ngame.up, game.down\ngame.left, game.right\nGameRunner에서 이 작업을 수행하면 해당 메서드가 마리오 게임에서\n호출됩니다\n오른쪽 클릭하고 Java 애플리케이션으로 실행하면 어떻게 될까요?\n그리고 여기를 더블 클릭하면\n여기서 콘솔 아웃풋을 확인할 수 있습니다\n게임을 실행하고 점프, 구멍으로 들어가기, 돌아가기, 가속 작업을 확인할 수 있습니다\n지금까지\n반복 1에서 간단한 Java 코드를 만들었습니다\nGameRunner 클래스를 만들고, 마리오 게임 클래스를 만들었으며, GameRunner를 사용해\n마리오 게임 클래스에서 작업을 실행할 수 있었습니다\n한 가지 흥미로운 점은 이를 강한 결합이라고 부른다는 점입니다\n왜 강한 결합이라고 부를까요?\n다음 단계에서 살펴보겠습니다