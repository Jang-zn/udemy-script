Video: 5단계 - 느슨한 결합과 강한 결합 알아보기\n==================================================\n\n이 단계에서는 강한 결합이 무엇인지, 느슨하게 결합된 코드는 어떻게 작성하는지\n알아보겠습니다\n첫 번째 질문부터 시작하겠습니다\n강한 결합이란 무엇일까요?\n왜 이 코드를 강한 결합이라고 부를까요?\n현재 AppGamingBasicJava를 보고 있으며\nMarioGame 인스턴스를 만들었으며 여기 GameRunner를 사용해 마리오 게임을 실행하고\n있습니다\n새 게임을 만들고 싶다고 해 보죠\n슈퍼 콘트라 게임을 만들겠습니다\n마리오 게임을 실행하는 대신, 이 부분은 주석으로 빼고 새 게임을 실행하려 한다고\n하겠습니다\nsuperContraGame = new\nSuperContraGame\n이게 제가 실행하려는 게임입니다\n빠르게 슈퍼 콘트라 게임을 만들어 보죠, Control 1, SuperContraGame 클래스를 만들고\n다시 게임 패키지를 사용하겠습니다\ncom.in28minutes\nlearnspringframework.game 패키지를 사용하겠습니다\n슈퍼 콘트라 게임, 마리오 게임, GameRunner 클래스가 동일하게\ncom.in28minutes\nlearnspringframework.game 패키지에 있는지 확인 후 마침을 눌러 마리오 게임에서 일부 코드를 복사할 수 있습니다\n이 부분을 복사해 이 부분에 붙여 넣겠습니다\n이제 마리오 게임에 구현된 메서드가 이 슈퍼 콘트라 게임에도 동일하게\n구현되었습니다\n하지만 슈퍼 콘트라 게임에서는 동일한 버튼이 다른 작업을 수행합니다\n버튼이 있을 때\n위로 가도록 하고 아래 버튼을 누르면 슈퍼 콘트라에서는 예를 들면 앉아야 합니다\n왼쪽을 누르면 슈퍼 콘트라는 뒤로 가고\n오른쪽을 누르면 콘트라가 총알을 발사합니다\n다른 게임이기 때문에 버튼을 눌렀을 때 다른 작업을 수행합니다\nAppGamingBasicJava로 돌아가겠습니다\n슈퍼 콘트라 게임이 준비되었습니다\n코드와 로직이 이미 있죠\n하지만 이 슈퍼 콘트라 게임을 실행하려 하면 어떻게 될까요?\n컴파일 오류가 생깁니다\n어떤 컴파일 오류가 나타날까요?\n생성자 GameRunner SuperContraGame이 정의되지 않았습니다\nGameRunner 클래스를 자세히 보면 마리오 게임과 강하게 결합되어 있습니다\nGameRunner 클래스를 사용해 슈퍼 콘트라 게임을 실행하려면 코드를 변경해야\n합니다\n코드를 어떻게 변경해야 할까요?\n여기로 와 MarioGame을 중단하고\nSuperContraGame을 입력해야 합니다\nSuperContraGame을 입력하고\n여기도 SuperContraGame이 있어야 하죠\n다른 게임을 실행할 수 있도록 GameRunner 클래스에서 코드를 변경했습니다\n여기 private를 입력하는 걸 잊어버렸네요\nprivate로 만들고\n저장하겠습니다\n이제 AppGamingBasicJava로 돌아와 저장하고\n오른쪽 클릭한 다음 Java 애플리케이션으로 실행하면\n이런\n콘설에서 확인할 수 없으니 더블 클릭하고\n여기서 확인하겠습니다\n위\n앉기\n뒤로 가기, 총알 발사\n이제 이 슈퍼 콘트라 게임을 실행할 수 있습니다\n하지만 지금 문제는 GameRunner 클래스가 특정 게임과 강하게 결합되어 있다는\n점입니다\n마리오 게임으로 돌아와 보면 GameRunner가 다시 마리오 게임을 사용하도록\n해야 합니다\n이를 강한 결합이라고 합니다\n결합이란 무언가를 변경하는 데 얼마나 많은 작업이 관련되어 있는지에 대한 측정입니다\n슈퍼 콘트라 게임 대신 마리오 게임을 실행하려 하는 경우 특정 클래스에서 얼마나 많은 변화가 있어야\n할까요?\n이 점이 결합에서 측정하는 점입니다\n결합은 일상생활에서도 매우 중요합니다\n예를 들어 엔진은 차에 결합되어 있습니다\n엔진을 결합하는 데는 많은 노력이 듭니다\n하지만 바퀴는 차에 느슨하게 연결되어 있습니다\n타이어 바람이 빠지면 쉽게 바꿀 수 있습니다\n다른 좋은 예로 노트북과 컴퓨터가 있습니다\n노트북은 어디에나 휴대할 수 있습니다\n특정 공간에 강하게 결합되어 있지 않습니다\n하지만 컴퓨터는 움직이기 더 힘듭니다\n결합은 훌륭한 소프트웨어를 구축하는 데 훨씬 중요합니다\n기술에서 유일하게 변하지 않는 것은 변화입니다\n모든 것이 바뀝니다\n비즈니스에도 변화가 필요하고, 프레임워크가 변화하고, 코드가 변화하고, 따라서 가능한 한\n느슨한 결합을 사용해야 합니다\n가능한 한 코드를 적게 변경하면서 기능을 변경할 수 있어야 합니다\n다음 단계부터는 Java 인터페이스 및 Spring 프레임워크가 느슨한 결합에 어떤 도움을 주는지\n살펴보겠습니다\n이 단계에서는 GameRunner 클래스가 특정 게임에 강하게 결합되어 있다는 점을 확인했습니다\n한 게임에서 다른 게임으로 변경하려면 GameRunner 클래스를 변경해야\n합니다\n느슨한 결합은 어떻게 가져올 수 있을까요?\n이 주제는 다음 단계에서 살펴보겠습니다